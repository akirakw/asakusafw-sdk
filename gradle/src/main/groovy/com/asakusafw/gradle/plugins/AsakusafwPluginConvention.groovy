/*
 * Copyright 2011-2016 Asakusa Framework Team.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.asakusafw.gradle.plugins

import java.lang.reflect.Field
import java.lang.reflect.Modifier

import org.gradle.api.JavaVersion

/**
 * Convention class for {@link AsakusafwPlugin}.
 * @since 0.5.2
 * @version 0.9.0
 */
class AsakusafwPluginConvention {

    /**
     * Schema version of this convention.
     */
    static final CONVENTION_SCHEMA_VERSION = '1.4.0'

    /**
     * The schema version of this convention.
     * @since 0.6.1
     */
    final String conventionSchemaVersion = CONVENTION_SCHEMA_VERSION

    /**
     * Asakusa Framework Version.
     * This property must be specified in project configuration.
     * <dl>
     *   <dt> Default value: </dt>
     *     <dd> Asakusa Framework Core libraries version </dd>
     * </dl>
     * @deprecated use {@code asakusafw.core.version} instead
     */
    @Deprecated
    String asakusafwVersion

    /**
     * Maximum heap size for Model Generator process.
     * <dl>
     *   <dt> Default value: </dt>
     *     <dd> {@code '1024m'} </dd>
     * </dl>
     */
    String maxHeapSize

    /**
     * Logback configuration file path.
     * <dl>
     *   <dt> Default value: </dt>
     *     <dd> <code>"src/${project.sourceSets.test.name}/resources/logback-test.xml"</code> </dd>
     * </dl>
     */
    String logbackConf

    /**
     * The base Java package name used in Asakusa Framework code generation.
     * <dl>
     *   <dt> Default value: </dt>
     *     <dd> {@code project.group} </dd>
     * </dl>
     */
    String basePackage

    /**
     * Core settings.
     * @since 0.9.0
     */
    CoreConfiguration core

    /**
     * SDK settings.
     * @since 0.9.0
     */
    AsakusafwSdkExtension sdk

    /**
     * DMDL settings.
     */
    DmdlConfiguration dmdl

    /**
     * Model generator settings.
     */
    ModelgenConfiguration modelgen

    /**
     * Java compiler settings.
     */
    JavacConfiguration javac

    /**
     * DSL compiler settings.
     */
    CompilerConfiguration compiler

    /**
     * Test tools settings.
     */
    TestToolsConfiguration testtools

    /**
     * Asakusa SDK core settings.
     * @since 0.9.0
     */
    static class CoreConfiguration {
        // no special members
    }

    /**
     * DMDL settings for building Asakusa batch applications.
     */
    static class DmdlConfiguration {

        /**
         * The character encoding using in DMDL sources.
         * <dl>
         *   <dt> Default value: </dt>
         *     <dd> {@code 'UTF-8'} </dd>
         * </dl>
         */
        String dmdlEncoding

        /**
         * The directory stored DMDL sources.
         * <dl>
         *   <dt> Default value: </dt>
         *     <dd> <code>"src/${project.sourceSets.main.name}/dmdl"</code> </dd>
         * </dl>
         */
        String dmdlSourceDirectory
    }

    /**
     * Model Generator settings for building Asakusa batch applications.
     */
    static class ModelgenConfiguration {

        /**
         * Package name that is used Model classes generated by Model Generator.
         * <dl>
         *   <dt> Default value: </dt>
         *     <dd> <code>"${project.asakusafw.basePackage}.modelgen"</code> </dd>
         * </dl>
         */
        String modelgenSourcePackage

        /**
         * The directory where model sources are generated.
         * <dl>
         *   <dt> Default value: </dt>
         *     <dd> <code>"${project.buildDir}/generated-sources/modelgen"</code> </dd>
         * </dl>
         */
        String modelgenSourceDirectory
    }

    /**
     * Java compiler settings for building Asakusa batch applications.
     */
    static class JavacConfiguration {

        /**
         * The directory where compiled operator impl/factory sources are generated.
         * <dl>
         *   <dt> Default value: </dt>
         *     <dd> <code>"${project.buildDir}/generated-sources/annotations"</code> </dd>
         * </dl>
         */
        String annotationSourceDirectory

        /**
         * Java source encoding of project.
         * <dl>
         *   <dt> Default value: </dt>
         *     <dd> {@code 'UTF-8'} </dd>
         * </dl>
         */
        String sourceEncoding

        /**
         * Java version compatibility to use when compiling Java source.
         * <dl>
         *   <dt> Default value: </dt>
         *     <dd> {@code '1.8'} </dd>
         * </dl>
         */
        JavaVersion sourceCompatibility

        /**
         * Java version to generate classes for.
         * <dl>
         *   <dt> Default value: </dt>
         *     <dd> {@code '1.8'} </dd>
         * </dl>
         */
        JavaVersion targetCompatibility

        void sourceCompatibility(Object value) {
            this.sourceCompatibility = JavaVersion.toVersion(value)
        }

        void targetCompatibility(Object value) {
            this.targetCompatibility = JavaVersion.toVersion(value)
        }
    }

    /**
     * DSL compiler settings for building Asakusa batch applications.
     * @version 0.8.0
     */
    static class CompilerConfiguration {

        /**
         * Whether Asakusa DSL compiler for MapReduce is enabled or not.
         * @since 0.8.0
         */
        boolean enabled

        /**
         * Package name that is used batch compiled classes for Hadoop MapReduce, JobClient and so on.
         * <dl>
         *   <dt> Default value: </dt>
         *     <dd> <code>"${project.asakusafw.basePackage}.batchapp"</code> </dd>
         * </dl>
         */
        String compiledSourcePackage

        /**
         * The directory where batch compiled sources are stored.
         * <dl>
         *   <dt> Default value: </dt>
         *     <dd> <code>"${project.buildDir}/batchc"</code> </dd>
         * </dl>
         */
        String compiledSourceDirectory

        /**
         * DSL Compiler options.
         * <dl>
         *   <dt> Default value: </dt>
         *     <dd> <code>"XjavaVersion={@link AsakusafwPluginConvention.JavacConfiguration#targetCompatibility}" </dd>
         * </dl>
         */
        List<String> compilerOptions

        /**
         * The directory where work files for batch compile are stored (optional).
         * If this property is {@code null}, the compiler use a temporary directory.
         * <dl>
         *   <dt> Default value: </dt>
         *     <dd> {@code null} </dd>
         * </dl>
         */
        String compilerWorkDirectory

        /**
         * The working root directory when used hadoop job execution.
         * <dl>
         *   <dt> Default value: </dt>
         *     <dd> <code>'target/hadoopwork/${execution_id}'</code> </dd>
         * </dl>
         */
        String hadoopWorkDirectory

        /**
         * Sets the DSL Compiler options.
         *
         * @param compilerOptions The value for the DSL Compiler options as comma separated String
         */
        void compilerOptions(String compilerOptions) {
            setCompilerOptions(compilerOptions.tokenize(',').collect {it.trim()})
        }

        /**
         * Sets the DSL Compiler options.
         *
         * @param compilerOptions The value for the DSL Compiler options as List of String
         */
        void compilerOptions(List<String> compilerOptions) {
            this.compilerOptions = compilerOptions
        }
    }

    /**
     * Test tools settings for building Asakusa batch applications.
     */
    static class TestToolsConfiguration {

        /**
         * The format of test data sheet.
         * This must be {@code (DATA|RULE|INOUT|INSPECT|ALL|DATAX|RULEX|INOUTX|INSPECTX|ALLX)}.
         * <dl>
         *   <dt> Default value: </dt>
         *     <dd> {@code 'ALL'} </dd>
         * </dl>
         */
        String testDataSheetFormat

        /**
         * The directory where test data sheet files are generated.
         * <dl>
         *   <dt> Default value: </dt>
         *     <dd> <code>"${project.buildDir}/excel"</code> </dd>
         * </dl>
         */
        String testDataSheetDirectory
    }

    @Override
    String toString() {
        // explicitly invoke meta-method
        def delegate = this.metaClass.getMetaMethod('toStringDelegate')
        if (delegate) {
            return delegate.invoke(this)
        }
        return toStringDelegate()
    }

    String toStringDelegate() {
        return super.toString()
    }

    def getConventionProperties() {
        return asMap(AsakusafwPluginConvention, this, 'com.asaksuafw.asakusafw.')
    }

    private static def asMap(Class<?> declared, Object obj, String keyPrefix) {
        def results = [:]
        for (Field field : declared.declaredFields.findAll{ !it.synthetic && !Modifier.isStatic(it.getModifiers()) && obj.hasProperty(it.name) }) {
            String propertyKey = keyPrefix + field.name
            Class<?> propertyType = field.type
            Object propertyValue
            try {
                propertyValue = obj.getAt(field.name)
            } catch (Exception e) {
                // ignores unset value
                propertyValue = null
            }
            if (propertyValue != null && isConventionMember(propertyType)) {
                results += asMap(propertyType, propertyValue, propertyKey + '.')
            } else {
                results[propertyKey] = propertyValue?.toString() ?: ''
            }
        }
        return results
    }

    private static boolean isConventionMember(Class<?> target) {
        if (target == null || target.isPrimitive() || target == String) {
            return false
        } else if (AsakusafwPluginConvention.class.isAssignableFrom(target)) {
            return true
        }
        return isConventionMember(target.getEnclosingClass())
    }
}
